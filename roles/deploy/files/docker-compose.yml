version: "3"
services:
  # test:
  #   image: 'tattioff/ubuntu-test:latest'
  #   hostname: 'test-container.vm'
  #   networks:
  #     - devnet
  artifact-server:
    image: 'tattioff/artifact-server'
    # user: "root"
    # working_dir: /home/node/app
    # environment:
    #   - NODE_ENV=production
    volumes:
      - '/srv/layers:/home/node/app'
    ports:
      - 8091:8091
    networks:
      - devnet
  postgres:
    image: 'postgres'
    restart: always
    environment:
      POSTGRES_PASSWORD: admin
      #POSTGRES_USER
      #POSTGRES_DB
    volumes:
      - 'postgres-data:/var/lib/postgresql/data'
    networks:
      - devnet
  adminer:
    image: adminer
    restart: always
    ports:
      - 8085:8080
    networks:
      - devnet
  clair:
    image: 'tattioff/clair' #'quay.io/coreos/clair:v2.0.0'
    command: -config=/config/config.yaml
    ports:
      - 6060:6060
      - 6061:6061
    volumes:
      - '/srv/clair/config:/config'
    networks:
      - devnet
  # curl -i -X GET dev_clair:6060/v1/namespaces/debian%3A7/vulnerabilities?limit=2
  # docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres
  gitlab:
    image: 'gitlab/gitlab-ce:latest'
    restart: always
    hostname: 'gitlab-container.vm'
    environment:
      - ENV GITLAB_PORT=10080
      - ENV GITLAB_SSH_PORT=10022
    ports:
      - '10080:80'
      - '443:443'
      - '10022:22'
    volumes:
      - '/srv/gitlab/config:/etc/gitlab'
      - '/srv/gitlab/logs:/var/log/gitlab'
      - '/srv/gitlab/data:/var/opt/gitlab'
    networks:
      - devnet
  jenkins:
    image: 'tattioff/jenkins'
    restart: always
    hostname: 'jenkins-container.vm'
    ports:
      - '8080:8080'
      - '50000:50000'
    volumes:
      - 'jenkins-data-new:/var/jenkins_home'
      - '/var/run/docker.sock:/var/run/docker.sock'
    networks:
      - devnet
  # visualizer:
  #   image: dockersamples/visualizer:stable
  #   ports:
  #     - "8080:8080"
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock"
  #   deploy:
  #     placement:
  #       constraints: [node.role == manager]
  #   networks:
  #     - devnet
  # redis:
  #   image: redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - /c/Users/etatros/Documents/Projects/docker-setup-environment/data:/data
  #   deploy:
  #     placement:
  #       constraints: [node.role == manager]
  #   command: redis-server --appendonly yes
  #   networks:
  #     - devnet
volumes:
  jenkins-data-new:
  postgres-data:

networks:
  devnet:
